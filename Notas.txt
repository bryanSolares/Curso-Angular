Versionamiento y significado
7.0.2

2=Parches, retrocompatible, arreglo de errores
0=Actualización menor, agrega funcionalidades, retro compatible 
7=Versión mayor, puede ser o no retro compatible


Video 1.10***************************************************************
compilación de codigo typescript a js => tsc nombrearchivo.ts
para generar archivo de configuración ts => tsc --init
noImplicitAny => nada declarado como any
tsc -w => entra en modo observador para compilación automática
encabezado de tsconfig despues de llaves colocar para excluir directorios para compilación => exclude = ["nombredirectorio"]

Video 1.16***************************************************************
Primero son los argumentos obligatorios, opcionales por último por defecto.

Video 2.19***************************************************************
Promesas= código que se ejecuta y que permite no bloquear el código de mi aplicación
Las promesas no se pueden traducir a ES5

Video 2.23***************************************************************
Es convesión que las clases tengan la primera letra capitalizada

Video 2.26***************************************************************
Añadido que se coloca antes de la definición de la clase
Permite añadir funcionalidad a la clase, se inicia con @nombredecorador

Video 3.35***************************************************************
Los componentes, pequeñas clases que cumplen una tarea en especifico:
1.Menu de navegacion
2.Barra lateral
3.Subbloques
4.Pie de aplicación
Son clases normales que tiene un decorador en especifico

DIRECTIVAS ESTRUCTURALES:
Le dicen al html que debe hacer:
*ngIf
*ngFor

Video 3.38***************************************************************
Para crear un proyecto => ng new nombreaplicacion
Para correr aplicacion en puerto por defecto 4201 => ng serve -o

Video 3.39***************************************************************
Estructura de un proyecto angular
e2e = carpeta destinada al manejor de prueba de extremo a extremo
node_modules = modulos de nodejs, no se debe subir a un repositorio
src = se encuentra la aplicación angular
    app = archivos de nuestra aplicación
        component.ts = primer componenete que la aplicación cargará
        component.html = html del componente en especifico
        component.css = css del componente en especifico
        component.spec.ts = para pruebas automáticas
        module.ts = contenedor de módulos y decoradores especiales
    assents = donde se coloca recursos estaticos
        .gitkeep = sirve para subir la carpeta a git
    enviroments = contenedor de variables de ambiente
        environment.ts = variables de ambiente de desarrollo
        environment.prod.ts = variables de ambiente de produccion
    browserslist = para ajustar css o mejor soporte de css
    index.html = renderiza la aplicación aquí
    main.ts = configuracion inicial para ambiente de aplicacion web
    polyfills.ts = para configuración de navegadores viejos
    styles.css = estilos globales para la aplicación
karma.conf.js = pruebas de karma
.editorconfig = configuraciones del editor
.gitignore = archivos que ignora carpetas para commit
angular.json = archivo que le dice a angular como es nuestra aplicacion y como funciona
browserslist = configuración para soporte de navegadores
package-lock = como le dice a node como fue creado el package.json
package.json = archivo importante. 
README.md = explica como funciona la aplicacion
tsconfig.json = le dice a typescript como trabajar
tslint.json = forzará a escribir un código más limpio de ts

Video 3.40***************************************************************
Como convención cuando se crea un componente despues del nombre sería= nombre.component.ts
Esto indentifica el archivo de manera entendible
Para utilizar un componente se debe exportar la clase y en el app.module.ts se debe agregar a ***********declarations***************
Para convertir una clase componente es necesario agregar el decorador Component de @angular/core

Video 3.42***************************************************************
Para crear componentes:
ng g c ubicacion/nombrecomponenete

Video 3.44***************************************************************
DIRECTIVAS
*ngFor
*ngIf

Video 4.51 ***************************************************************
Son tres formas las cuales se pueden utilizar para instalar bootstrap
1. Direcciones de la web
2. Descargar los archivos
3. Instalar desde npm <- aquí se debe modificar el archivo angular.json
 La desventaja de hacer en la forma tres, es que las librerias forman parte del bundle y la aplicación pesaría más.
                         "styles": [
                            "src/styles.css",
                            "./node_modules/bootstrap/dist/css/bootstrap.min.css"
                        ],
                        "scripts": [
                            "./node_modules/jquery/dist/jquery.slim.min.js",
                            "./node_modules/popper.js/dist/umd/popper.min.js",
                            "./node_modules/bootstrap/dist/js/bootstrap.min.js"
                        ]

Video 4.52 ***************************************************************
para crear un componente sin estilos: ng g c nombrecomponente -is

Video 4.53 ***************************************************************
para crear rutas es necesario seguir la estructura, en src:

import { RouterModule, Routes } from '@angular/router';
import { HomeComponent } from './components/home/home.component';

const APP_ROUTES: Routes = [
  { path: 'home', component:  HomeComponent},
  { path: '**', pathMatch: 'full', redirectTo: '' },
];

export const APP_ROUTING = RouterModule.forRoot(APP_ROUTES,{useHash:true});

luego se importa la constantes en app.module.ts y se coloca en la sección de imports

// Rutas
import { APP_ROUTING } from './app.module.routes';
imports: [
    BrowserModule,
    APP_ROUTING
        ],

Cuando se utiliza la opción de userHash:true, no es necesaria la línea en el html principal: -> <base href="/">
de lo contrario es obligatorio

Video 4.54 ***************************************************************
Para hacer una navegación entre paginas se debe implementas [routerLink] en lugar de a href, debo a que es una pagína estática
[routerLink]="['ruta']" <- arreglo de direcciones

routerLinkActive="active" <- para indicar que una ruta tiene el foco o está activa

Video 4.56 ***************************************************************
SERVICIOS:
Bridar información a quién lo necesite
Realizar peticiones CRUD
Mantener la data de forma persistente
Servir como recurso re-utilizable para nuestra aplicación

Video 4.57 ***************************************************************
Como estándar para nombrar un archivo de servicio es:
nombre.service.ts

Para crear un servicio se debe colocar a la clase un decorador -> Injectable = @angular/core

Para que la aplicación entienda que tiene un servicio para usar se debe colocar el servicio en app.module.ts
Se debe colocar en sección de providers
providers: [
    HeroesService
            ]
Para utilizarlo en el componente, se debe importar en éste y luego instanciarlo en el constructor


Video 4.59 ***************************************************************
Para hacer un direccionamiento a una pagina nueva se puede hacer de dos formas:
1. con la etiqueta a y usando [routerLink]="['/ruta',parametro]"
2. mediante un método en un botón button (click)="nombremetodo(parametro)" -> aquí usar en método router.navigate(['/ruta',parametro])

Video 4.60 ***************************************************************
Para recibir los parametros enviados mediante url, se hace con la clase ActivatedRoute en @angular/router
con una instancia de éste clase se puede recibir el el parámetro bajo una subscripcion

this.activetedRoute.params.subscribe(params => {
      console.log(params['nombreparametro']);
    })

Video 4.63 ***************************************************************
PIPES:
Transforman la data en el template, ayudarán a que la data se vea mejor
*currency
*date
*uppercase
*json
*limitTo
*lowercase
*asyc
*decimal
*percet

Un ejemplo para use de pipes en el html:
<h1 class="animated fadeIn"> {{heroe.nombre | uppercase}} <small>({{heroe.aparicion | date:'y'}})</small> </h1>

Video 4.64 ***************************************************************
Para agregar un evento sobre cualquier elemento HTML se procede:
(keyup.enter)="nombrefuncion(buscarTexto.value)"
(click)="nombrefuncion(buscarTexto.value)"


Video 4.68 ***************************************************************
Para genera un componente sin el archivo de pruebas:
ng g c nombrecomponenete --spec=false
Para enviar información de un componente padre a un hijo se usa el decorador @Input() en el componente donde se recibirá la información, en el componenete se debe colocar éste decorador a los atributos que recibiran el valor del padre.
  @Input() heroe: any = {};
  @Input() id: number;

Para enviar los datos desde el padre:
<app-heroe-tarjeta [heroe]="heroe" [id]="heroe.id" *ngFor="let heroe of heroes"></app-heroe-tarjeta>
entre llaves cuadradas se coloca el nombre de la variable que está recibirá el valor y dentro de las comillas lo que se envia.


Video 4.69 ***************************************************************
Para utilizar métodos del padre desde hijo es necesario que desde el hijo que proceda a hacer una salida (@Output decorador), acompañado de un EventEmitter que será el transmisor del evento.

En el componenete hijo se debe instanciar un EventEmmiter que será el emisor desde el padre. En el método donde que se utilizará para activar el emisor se emitirá el dato hacía el padre. En el padre se asimilará un evento que será el escuchador con el mismo nombre del Emitter en lugar de click ((click) = (nombre eventemitter)), luego de ésto éste escuchador será el que dispare la función propia del padre. El resultado sería:

HIJO:
@Output() heroeSeleccionado: EventEmitter<number>;

constructor(private router: Router) 
{
    this.heroeSeleccionado = new EventEmitter();
}

<button (click)="verHeroe()">

verHeroe() 
{
    this.heroeSeleccionado.emit(this.id);
}

PADRE:
 <app-heroe-tarjeta (heroeSeleccionado)="verHeroe($event)"  

verHeroe(indice: number)
{
    this.router.navigate(['/heroe', indice]);
}



SECCION 5 ***************************************************************
Manejo de pipes (Tuberias |): sirven para transformar data en el html de manera visual

Slice = permite cortar, éste requiere un parámetro por lo menos


para configuración de idioma de acuerdo al pais donde se necesite (por defecto angular se configura en inglés)
ng add @angular/localize
import { registerLocaleData  } from "@angular/common";
import localEs from "@angular/common/locales/es";

registerLocaleData(localEs);
 providers: [
    {
      provide: LOCALE_ID,
      useValue: 'es'
    }

Para crear un pipe personalizado con angular cli: 
ng g p nombrepipe

Colocará un decorador @Pipe = @angular/core

Para cargar recursos que son externos y el DOM los cataloga como inseguros de debe crear un pipe
import { Pipe, PipeTransform } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';

@Pipe({
  name: 'domseguro'
})
export class DomseguroPipe implements PipeTransform {

  constructor(private domSanitizer: DomSanitizer){}

  transform(value: string, ...args: unknown[]): SafeResourceUrl {
    return this.domSanitizer.bypassSecurityTrustResourceUrl(value);
  }

}

<iframe
      width="560"
      height="315"
      [src]="videoUrl | domseguro"
      frameborder="0"
      allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
    ></iframe>

 

SECCION 6 ***************************************************************
Para utilizar la funcionalidad de peticiones es necesario agregar a los imports en app.module.ts el HttpClientModule de @angular/common/http
y luego en donde se quiere agregar la funcionalidad de peticiones http se importa la característa de la anterior importación: HttpClient de @angular/common/http
-------------------------------------------------------------------------------------
Cuando en un servicio se encuentre el decorador:
@Injectable({
  providedIn: 'root'
})
significará que no es necesario la importación en la sección de providers en el app.module.ts

-------------------------------------------------------------------------------------
Para añadir encabezados (headers) a una petición http se hace:
import { HttpHeaders } from '@angular/common/http';
const headers = new HttpHeaders({
      Authorization:
        'Bearer BQBjnRXm4jN9yTvM4mJdK9zk8B4CJHrk-h2MMlmOfgdv3Y25GXEeJZwNcHlb1FPxx7zKqo0E_wpD75_o5CQ',
    });

this.http
      .get('https://api.spotify.com/v1/browse/new-releases', {headers})
      .subscribe((data) => console.log(data));

SECCION 7 ***************************************************************
Cuando se reciben parametros para no obtar para una subscripción contantes se puede usar un snapshot
const listaId = activatedRoute.snapshot.paramMap.get("listaId");
--------------------------------------------------------------------------------
Para usar un databinding (emisor y escuchador) se utiliza:
[(ngModel)]="nombreVariableDeclarada"
--------------------------------------------------------------------------------
El evento ionChange se dispara cada vez que hay un cambio en el checkbox
(ionChange)="nombreMetodoAEjecutar()"
--------------------------------------------------------------------------------
Creación de módulos
NgModule = decorador que permite a una clase identificarla o hacer un módulo
CommonModule = lo que permite es la funcionalidad de ngIf, ngFor, etc
declarations = componentes que utiliza el módulo propiamente
exports = se colocará todo lo que se utilizará externamente
Para integrar funcionalidad de otros módulos en un módulo en especifico es necesario hacer la importación del módulo

módulo hijo
import { NgModule } from "@angular/core";
import { CommonModule } from "@angular/common";
import { ListasComponent } from "./listas/listas.component";

@NgModule({
  declarations: [ListasComponent],
  exports: [ListasComponent],
  imports: [CommonModule],
})
export class ComponentsModule {}


módulo donde se usará
import { ComponentsModule } from "../../components/components.module";

@NgModule({
  imports: [
    IonicModule,
    CommonModule,
    FormsModule,
    ComponentsModule,
    Tab1PageRoutingModule
  ],
  declarations: [Tab1Page]
})
export class Tab1PageModule {}
--------------------------------------------------------------------------------
Pipes impuros
@Pipe({
  name: 'filtroCompletado',
  pure: false
})

cada vez que se dispare en ciclo de detección de cambios, siempre se llamará el filtro
--------------------------------------------------------------------------------
@ViewChild('lista') lista: IonList;
permite llamar un elemento del html y poder utilizarlo dentro del component.ts

SECCION 8 ***************************************************************
1.Cambios en el estilo de algún elemento HTML utilizando variables en los componentes.
2.Comprender y aplicar CSS en un determinado scope, sin afectar los demás componentes. 
3.Adicionar y remover clases según variables o cualquier tipo de condición.
4.Crearemos directivas personalizadas.
5.Uso del ngSwitch.
6.Crearemos una pequeña aplicación para el uso de rutas y rutas hijas.
7.Comprenderemos el ciclo de vida de un componente o directiva.
--------------------------------------------------------------------------------
ngStyle = permite aplicar estilos de css en tiempo de ejecución
<some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
<some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
<some-element [ngStyle]="objExp">...</some-element>


<p [style.fontSize.px]="tam">
      Hola.... mundo éste es un párrafo
    </p>

    <button class="btn btn-primary" (click)="tam=tam+5">
      <i class="fa fa-plus" ></i>
    </button>

    <button class="btn btn-primary" (click)="tam=tam-5">
      <i class="fa fa-minus" ></i>
    </button>
--------------------------------------------------------------------------------
Cada componenete tiene su propio scope en el css
 styles: [`
    p{
      color:red;
      font-size:20px;
    }
  `]
--------------------------------------------------------------------------------
ngClass = mejora la funcionalidad de ngStyle, ya que son clases en especifico dinámicas a aplicar, la clase aplicada la concatena a la existente
<some-element [ngClass]="'first second'">...</some-element>
<some-element [ngClass]="['first', 'second']">...</some-element>
<some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
<some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
<some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>

<div [ngClass]="alert"  class="alert" role="alert">
  <strong>Well Done!</strong> You successfully read this important alert message.
</div>

<button class="btn btn-info" (click)="alert = 'alert-info'"> Info </button>
<button class="btn btn-success" (click)="alert = 'alert-success'"> Success </button>
<button class="btn btn-danger" (click)="alert = 'alert-danger'"> Danger </button>
<button class="btn btn-warning" (click)="alert = 'alert-warning'"> Warning </button>
<button class="btn btn-dark" (click)="alert = 'alert-dark'"> Dark </button>

<button  (click)="propiedades.danger = !propiedades.danger"
  [ngClass]="{
    'btn-danger': propiedades.danger,
    'btn-info': !propiedades.danger
  }"
  class="btn">
  Cambiar
</button>
--------------------------------------------------------------------------------
Directivas Personalizadas:
para crear una directiva = ng g d directives/resaltado
import { Directive } from '@angular/core';
@Directive({
  selector: '[appResaltado]'
})
export class ResaltadoDirective {
  constructor() { }
}

en el módulo principal se añade a las declaraciones

import { Directive, ElementRef, HostListener, Input } from '@angular/core';

@Directive({
  selector: '[appResaltado]',
})
export class ResaltadoDirective {
  @Input('appResaltado') nuevoColor: string;

  constructor(private el: ElementRef) {
    console.log('Directiva llamada');
    // el.nativeElement.style.backgroundColor = 'Yellow';
  }

  @HostListener('mouseenter') mouseEntro() {
    this.resaltar(this.nuevoColor || 'yellow');
  }

  @HostListener('mouseleave') mouseSalio() {
    this.resaltar(null);
  }

  private resaltar(color: string) {
    this.el.nativeElement.style.backgroundColor = color;
  }
}
--------------------------------------------------------------------------------
ngSwitch:
<div [ngSwitch]="alerta">
  <div *ngSwitchCase="'primary'">primary</div>
  <div *ngSwitchCase="'secondary'">secondary</div>
  <div *ngSwitchCase="'dark'">dark</div>
  <div *ngSwitchDefault>danger</div>
</div>
--------------------------------------------------------------------------------
Rutas hijas: para recibir los parametros del padre desde los hijos
    this.activatedRoute.parent.params.subscribe((parametros) => {
      console.log('RUTA HIJA DETALLE USUARIO', parametros);
    });

--------------------------------------------------------------------------------
CICLO DE VIDA DE UN COMPONENTE:
ngOnInit()                  -> cuando el componenete está inicializando, despues del primer ngOnChanges()
ngOnChanges()               -> cuando la data de las propiedad cambian
ngDoCheck()                 -> cada vez que se hace una revisión del ciclo de detección de cambios
ngAfterContentInit()        -> despues que se inserta algún tipo de contenido 
ngAfterContentChecked()     -> despues de la revisión del contenido insertado
ngAfterViewInit()           -> despues de la inicialización del componente o los componenetes hijos
ngAfterViewChecked()        -> despues de cada una de las revisión de los componenetes hijos
ngOnDestroy()               -> cuando se destruye el componente o se cambia de vista, también cuando se hace un ngIf del elemento

en la mayoria de veces basta con el OnInit y el OnChanges

SECCION 9 ***************************************************************
1. ¿Qué es Auth0 y la documentación basada en Angular 2?
2. Autenticación con Facebook, Twitter, Google, entre otros...
3. Creación de un formulario de captura para la creación de usuarios.
4. Personalización de la caja de login.
5. Uso de servicios para bloquear rutas que no son válidas si el usuario no esta autenticado.
6. Obtener la información del perfil del usuario ingresado.
7. Entre otras cosas útiles para nuestras aplicaciones.


Para generación de componente omitiendo archivo de estilos y test
ng g c components/navbar -is --skipTests
--------------------------------------------------------------------------------
Para implementar un protector de rutas se utiliza CanActivate
ng g guard services/auth --skipTests
import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
  canActivate(
    next: ActivatedRouteSnapshot,
    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {
    return true;
  }
  
}

Se implementa el Guard en la ruta que se desea proteger:
{
    path: 'protegida',
    component: ProtegidaComponent,
    canActivate: [AuthGuard]
  },

--------------------------------------------------------------------------------
Cuando se trabaja como un ngModel se debe importar un FormModule

Para controlar el envio de datos de un formulario 
<form (ngSubmit)="onSubmit()">
--------------------------------------------------------------------------------
para crear una referencia en el html de un formulario:
#formulario="ngForm"
--------------------------------------------------------------------------------



SECCION 11 ***************************************************************
EXISTEN DOS FORMAS DE MANEJAR FORMULARIOS
Por template: toda la configuración es por el lado del html
Reactivos: Todo el html queda limpio y toda la lógica queda por el lado del componente
--------------------------------------------------------------------------------
import { FormsModule } from '@angular/forms';
permite que angular tome el control de los formularios por lo tanto cuando se pulse cualquier botón de submit no tendrá el comportamiento por defecto de un html
ngModel
name="nombre del campo"
--------------------------------------------------------------------------------
Cuando a un input se le agrega ngModel y name="cualquiercosa", permite que se agregan clases especiales de Angular al componente:
ng-untouched = El campo no ha sido tocado 
ng-printine = El valor inicial del campo no ha sido modificado
ng-valid = Si el campo es válido
ng-dirty = Cuando cambia la información del formulario
ng-touched = El campo ha sido manipulado y se ha cambiado el foco

Cuando se coloca a un formulario el atributo (ngSubmit)="metodo()": se está indicando que cuando se precione un botón de submit relacionado al formulario éste ejecutará el método indicado dentro de parétesis
--------------------------------------------------------------------------------
Para obtener el valor de un formulario es necesario nombrarlo con una variable de angular para identificarlo, se procede a hacer con el #, lo que va dentro de comillas será el tipo:
#formulario="ngForm"
luego de ésto se envía:
(ngSubmit)="metodo(formulario)"

Cuando se reciben los datos se tiene múltiples propiedades que se pueden usar para comprobar los datos del formulario:
valid = si el formulario es válido
invalid = es lo opuesto a lo anterior
pending = para validaciones asincronas
controls = controles o inputs que se les ha colocado a los campos (name="nombre del campo"), y sus respectivos atributos
value= se encuentran los valores del formulario

Para los campos de formulario se puede colocar valores por defecto:
ngModel = indica solo que es un campo de angular para controlar
[ngModel] = indica que solo recibe valores pero no emite
[(ngModel)] = indica que recibe y emite valores 
--------------------------------------------------------------------------------
Una estructura de validaciones y atributos para los campos del HTML:
<input class="form-control"
               type="text"
               name="nombre"
               required
               minlength="5"
               placeholder="Nombre"
               [class.is-invalid]="nombre.invalid && nombre.touched"
               [ngModel]="usuario.nombre"
               #nombre="ngModel">

<input class="form-control"
             type="email"
             required
             name="email"
             placeholder="Correo electrónico"
             [class.is-invalid]="correo.invalid && correo.touched"
             pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,3}$"
             [ngModel]="usuario.correo"
             #correo="ngModel">

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

